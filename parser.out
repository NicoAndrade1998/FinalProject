Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression + expression
Rule 2     expression -> expression * expression
Rule 3     expression -> NUMBER

Terminals, with rules where they appear

*                    : 2
+                    : 1
NUMBER               : 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression * expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . * expression

    +               shift and go to state 3
    *               shift and go to state 4


state 2

    (3) expression -> NUMBER .

    +               reduce using rule 3 (expression -> NUMBER .)
    *               reduce using rule 3 (expression -> NUMBER .)
    $end            reduce using rule 3 (expression -> NUMBER .)


state 3

    (1) expression -> expression + . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression * expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 5

state 4

    (2) expression -> expression * . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression * expression
    (3) expression -> . NUMBER

    NUMBER          shift and go to state 2

    expression                     shift and go to state 6

state 5

    (1) expression -> expression + expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . * expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for * resolved as shift
    $end            reduce using rule 1 (expression -> expression + expression .)
    +               shift and go to state 3
    *               shift and go to state 4

  ! +               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! *               [ reduce using rule 1 (expression -> expression + expression .) ]


state 6

    (2) expression -> expression * expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . * expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for * resolved as shift
    $end            reduce using rule 2 (expression -> expression * expression .)
    +               shift and go to state 3
    *               shift and go to state 4

  ! +               [ reduce using rule 2 (expression -> expression * expression .) ]
  ! *               [ reduce using rule 2 (expression -> expression * expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 5 resolved as shift
WARNING: shift/reduce conflict for * in state 5 resolved as shift
WARNING: shift/reduce conflict for + in state 6 resolved as shift
WARNING: shift/reduce conflict for * in state 6 resolved as shift
